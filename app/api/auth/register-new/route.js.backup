import { NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import bcrypt from 'bcryptjs';
import { sendVerificationEmail, sendCompanyWelcomeEmail } from '../../../lib/emailService';

export async function POST(request) {
  try {
    const body = await request.json();

    const {
      username,
      email,
      password,
      user_type,
      // Personal info (job-seeker and employee)
      first_name,
      last_name,
      phone,
      birth_date,
      nationality_id,
      gender_id,
      // Address info (required for all)
      premise_name,
      street_name,
      barangay_name,
      city_name,
      // Jobseeker specific fields
      education_level,
      experience_level,
      preferred_job_type,
      preferred_location,
      preferred_salary_min,
      preferred_salary_max,
      profile_summary,
      skills,
      // Employee fields
      job_title,
      company_id,
      // Company fields (for all types that need company info)
      company_name,
      company_industry,
      company_description,
      company_website,
      company_size,
      company_phone,
      company_email
    } = body;

    console.log('Registration request received:', { email, user_type, first_name, last_name, company_name });

    // For company registration, email and password are not required
    if (user_type !== 'company') {
      if (!email || !password) {
        return NextResponse.json({ error: 'Email and password are required for personal accounts' }, { status: 400 });
      }

      if (!username || !username.trim()) {
        return NextResponse.json({ error: 'Username is required for personal accounts' }, { status: 400 });
      }

      // Validate email format
      if (!/\S+@\S+\.\S+/.test(email)) {
        return NextResponse.json({ error: 'Invalid email format' }, { status: 400 });
      }

      // Validate password strength
      if (password.length < 8) {
        return NextResponse.json({ error: 'Password must be at least 8 characters long' }, { status: 400 });
      }
    }

    // Validate user type
    if (!user_type) {
      return NextResponse.json({ error: 'User type is required' }, { status: 400 });
    }

    // Validate city (required for all registrations)
    if (!city_name || !city_name.trim()) {
      return NextResponse.json({ error: 'City is required' }, { status: 400 });
    }

    // Type-specific validation
    if (user_type === 'company') {
      if (!company_name || !company_name.trim()) {
        return NextResponse.json({ error: 'Company name is required for company registration' }, { status: 400 });
      }
    } else {
      // Personal registrations (job-seeker and employee)
      if (!first_name || !first_name.trim()) {
        return NextResponse.json({ error: 'First name is required' }, { status: 400 });
      }
      if (!last_name || !last_name.trim()) {
        return NextResponse.json({ error: 'Last name is required' }, { status: 400 });
      }
      if (!phone || !phone.trim()) {
        return NextResponse.json({ error: 'Phone number is required' }, { status: 400 });
      }
      if (!nationality_id) {
        return NextResponse.json({ error: 'Nationality is required' }, { status: 400 });
      }
      if (!gender_id) {
        return NextResponse.json({ error: 'Gender is required' }, { status: 400 });
      }
      if (!birth_date) {
        return NextResponse.json({ error: 'Date of birth is required' }, { status: 400 });
      }

      // Employee-specific validation
      if (user_type === 'employee') {
        if (!company_id || !company_id.trim()) {
          return NextResponse.json({ error: 'Company ID is required for employee registration' }, { status: 400 });
        }
      }
    }

    // Check if email already exists (only for personal registrations)
    if (user_type !== 'company') {
      const { data: existingAccount } = await supabase
        .from('account')
        .select('account_id')
        .eq('account_email', email)
        .single();

      if (existingAccount) {
        return NextResponse.json({ error: 'An account with this email already exists' }, { status: 400 });
      }
    }

    // Hash password (only for personal registrations)
    let hashedPassword = null;
    let verificationCode = null;
    if (user_type !== 'company') {
      hashedPassword = await bcrypt.hash(password, 12);
      // Generate 6-digit verification code
      verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    }

    // Generate unique account number (only for personal registrations)
    let accountNumber = null;
    if (user_type !== 'company') {
      accountNumber = 'ACC' + Date.now() + Math.floor(Math.random() * 1000);
    }

    // Handle different registration types
    if (user_type === 'company') {
      await registerCompany({
        company_name,
        company_description,
        company_website,
        company_phone,
        company_email,
        // Address data
        premise_name,
        street_name,
        barangay_name,
        city_name
      });
    } else {
      // Personal registration (job-seeker or employee)
      await registerPerson({
        username,
        email,
        hashedPassword,
        verificationCode,
        accountNumber,
        user_type,
        first_name,
        last_name,
        phone,
        birth_date,
        nationality_id,
        gender_id,
        // Address data
        premise_name,
        street_name,
        barangay_name,
        city_name,
        // Additional fields
        education_level,
        experience_level,
        preferred_job_type,
        preferred_location,
        preferred_salary_min,
        preferred_salary_max,
        profile_summary,
        skills,
        job_title,
        company_id,
        company_name,
        company_industry,
        company_description,
        company_website,
        company_size,
        company_phone,
        company_email
      });
    }

    // Send appropriate emails after successful registration
    if (user_type === 'company') {
      // Send welcome email for company registration
      if (company_email || company_name) {
        try {
          await sendCompanyWelcomeEmail(company_email || 'noreply@gojob.com', company_name);
          console.log('Company welcome email sent successfully');
        } catch (emailError) {
          console.error('Failed to send company welcome email:', emailError);
          // Don't fail the registration if email fails
        }
      }
    } else {
      // Send verification email for personal registrations
      try {
        const userName = `${first_name} ${last_name}`;
        await sendVerificationEmail(email, verificationCode, userName);
        console.log('Verification email sent successfully');
      } catch (emailError) {
        console.error('Failed to send verification email:', emailError);
        // Don't fail the registration if email fails
      }
    }

    return NextResponse.json({ 
      message: user_type === 'company' 
        ? 'Company registration successful! Your company has been added to our directory.' 
        : 'Registration successful! Please check your email for verification instructions.',
      verificationRequired: user_type !== 'company'
    });

  } catch (error) {
    console.error('Registration error:', error);
    
    // Handle specific database errors
    if (error.message && error.message.includes('duplicate key')) {
      return NextResponse.json({ error: 'An account with this information already exists' }, { status: 400 });
    }
    
    return NextResponse.json({ 
      error: error.message || 'Registration failed. Please try again.' 
    }, { status: 500 });
  }
}

async function registerCompany(data) {
  const {
    company_name,
    company_description,
    company_website,
    company_phone,
    company_email,
    // Address data
    premise_name,
    street_name,
    barangay_name,
    city_name
  } = data;

  // Create address for company
  const { data: addressData, error: addressError } = await supabase
    .from('address')
    .insert([{
      premise_name: premise_name || (company_name + ' HQ'),
      street_name: street_name || null,
      barangay_name: barangay_name || null,
      city_name: city_name
    }])
    .select('address_id')
    .single();

  if (addressError) {
    console.error('Address creation error:', addressError);
    throw new Error('Failed to create company address: ' + addressError.message);
  }

  // Create company record (no account required)
  const { error: companyError } = await supabase
    .from('company')
    .insert([{
      company_name,
      company_email: company_email || null,
      company_phone: company_phone || null,
      company_website: company_website || null,
      company_description: company_description || null,
      address_id: addressData.address_id
    }]);

  if (companyError) {
    console.error('Company creation error:', companyError);
    throw new Error('Failed to create company record: ' + companyError.message);
  }
}

async function registerPerson(data) {
  const {
    username,
    email,
    hashedPassword,
    verificationCode,
    accountNumber,
    user_type,
    first_name,
    last_name,
    phone,
    birth_date,
    nationality_id,
    gender_id,
    // Address data
    premise_name,
    street_name,
    barangay_name,
    city_name,
    // Additional fields
    profile_summary,
    job_title,
    company_id,
    company_name,
    company_industry,
    company_description,
    company_website,
    company_size,
    company_phone,
    company_email
  } = data;

  // Validate nationality exists
  const { data: nationalityCheck, error: nationalityError } = await supabase
    .from('nationality')
    .select('nationality_id')
    .eq('nationality_id', nationality_id)
    .single();

  if (nationalityError || !nationalityCheck) {
    throw new Error('Invalid nationality selected');
  }

  // Validate gender exists
  const { data: genderCheck, error: genderError } = await supabase
    .from('gender')
    .select('gender_id')
    .eq('gender_id', gender_id)
    .single();

  if (genderError || !genderCheck) {
    throw new Error('Invalid gender selected');
  }

  // Create address
  const { data: addressData, error: addressError } = await supabase
    .from('address')
    .insert([{
      premise_name: premise_name || null,
      street_name: street_name || null,
      barangay_name: barangay_name || null,
      city_name: city_name
    }])
    .select('address_id')
    .single();

  if (addressError) {
    console.error('Address creation error:', addressError);
    throw new Error('Failed to create address: ' + addressError.message);
  }

  // Create person record
  const { data: personData, error: personError } = await supabase
    .from('person')
    .insert([{
      first_name,
      last_name,
      middle_name: null,
      date_of_birth: birth_date,
      gender: parseInt(gender_id),
      address_id: addressData.address_id,
      nationality_id: parseInt(nationality_id)
    }])
    .select('person_id')
    .single();

  if (personError) {
    console.error('Person creation error:', personError);
    throw new Error('Failed to create person record: ' + personError.message);
  }

  // Create account
  const { data: accountData, error: accountError } = await supabase
    .from('account')
    .insert([{
      account_email: email,
      account_username: username || (email.split('@')[0] + '_' + Date.now()),
      account_phone: phone || null,
      account_number: accountNumber,
      account_password: hashedPassword,
      account_type_id: 2, // Both job-seekers and employees use account_type_id=2
      account_is_verified: false
    }])
    .select('account_id')
    .single();

  if (accountError) {
    console.error('Account creation error:', accountError);
    throw new Error('Failed to create account: ' + accountError.message);
  }

  // Store verification code with 24-hour expiration
  try {
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24);
    
    const { error: codeError } = await supabase
      .from('verification_codes')
      .upsert([{
        account_id: accountData.account_id,
        code: verificationCode,
        expires_at: expiresAt.toISOString()
      }], {
        onConflict: 'account_id'
      });

    if (codeError) {
      console.error('Verification code storage error:', codeError);
      console.log('Note: verification_codes table may not exist. Please run the SQL script to create it.');
      // Don't fail registration if verification code storage fails
    }
  } catch (verificationError) {
    console.error('Failed to store verification code:', verificationError);
    // Continue with registration even if verification code storage fails
  }

  if (user_type === 'job-seeker') {
    // Create job seeker record
    const { error: jobSeekerError } = await supabase
      .from('job_seeker')
      .insert([{
        person_id: personData.person_id,
        account_id: accountData.account_id,
        job_seeker_description: profile_summary || null
      }]);

    if (jobSeekerError) {
      console.error('Job seeker creation error:', jobSeekerError);
      throw new Error('Failed to create job seeker profile: ' + jobSeekerError.message);
    }
  } else if (user_type === 'employee') {
    // For employees, use provided company_id
    let finalCompanyId = company_id || null;

    // If company_id is provided, validate it exists
    if (company_id) {
      const { data: companyExists, error: companyCheckError } = await supabase
        .from('company')
        .select('company_id')
        .eq('company_id', company_id)
        .single();

      if (companyCheckError || !companyExists) {
        throw new Error('Invalid company ID provided');
      }
    }

    // Create employee record
    const { error: employeeError } = await supabase
      .from('employee')
      .insert([{
        person_id: personData.person_id,
        account_id: accountData.account_id,
        company_id: finalCompanyId,
        position_name: job_title || null
      }]);

    if (employeeError) {
      console.error('Employee creation error:', employeeError);
      throw new Error('Failed to create employee profile: ' + employeeError.message);
    }
  }
}

export async function POST(request) {
  try {
    const body = await request.json();    const {
      username,
      email,
      password,
      user_type,
      // Personal info (job-seeker and employee)
      first_name,
      last_name,
      phone,
      birth_date,
      nationality_id,
      gender_id,
      // Address info (required for all)
      premise_name,
      street_name,
      barangay_name,
      city_name,
      // Jobseeker specific fields
      education_level,
      experience_level,
      preferred_job_type,
      preferred_location,
      preferred_salary_min,
      preferred_salary_max,
      profile_summary,
      skills,
      // Employee fields
      job_title,
      company_id,
      // Company fields (for all types that need company info)
      company_name,
      company_industry,
      company_description,
      company_website,
      company_size,
      company_phone,
      company_email
    } = body;

    console.log('Registration request received:', { email, user_type, first_name, last_name, company_name });    // For company registration, email and password are not required
    if (user_type !== 'company') {
      if (!email || !password) {
        return NextResponse.json({ error: 'Email and password are required for personal accounts' }, { status: 400 });
      }

      if (!username || !username.trim()) {
        return NextResponse.json({ error: 'Username is required for personal accounts' }, { status: 400 });
      }

      // Validate email format
      if (!/\S+@\S+\.\S+/.test(email)) {
        return NextResponse.json({ error: 'Invalid email format' }, { status: 400 });
      }

      // Validate password strength
      if (password.length < 8) {
        return NextResponse.json({ error: 'Password must be at least 8 characters long' }, { status: 400 });
      }
    }

    // Validate user type
    if (!user_type) {
      return NextResponse.json({ error: 'User type is required' }, { status: 400 });
    }

    // Validate city (required for all registrations)
    if (!city_name || !city_name.trim()) {
      return NextResponse.json({ error: 'City is required' }, { status: 400 });
    }    // Type-specific validation
    if (user_type === 'company') {
      if (!company_name || !company_name.trim()) {
        return NextResponse.json({ error: 'Company name is required for company registration' }, { status: 400 });
      }
    } else {
      // Personal registrations (job-seeker and employee)
      if (!first_name || !first_name.trim()) {
        return NextResponse.json({ error: 'First name is required' }, { status: 400 });
      }
      if (!last_name || !last_name.trim()) {
        return NextResponse.json({ error: 'Last name is required' }, { status: 400 });
      }
      if (!phone || !phone.trim()) {
        return NextResponse.json({ error: 'Phone number is required' }, { status: 400 });
      }      if (!nationality_id) {
        return NextResponse.json({ error: 'Nationality is required' }, { status: 400 });
      }
      if (!gender_id) {
        return NextResponse.json({ error: 'Gender is required' }, { status: 400 });
      }
      if (!birth_date) {
        return NextResponse.json({ error: 'Date of birth is required' }, { status: 400 });
      }
        // Employee-specific validation
      if (user_type === 'employee') {
        if (!company_id || !company_id.trim()) {
          return NextResponse.json({ error: 'Company ID is required for employee registration' }, { status: 400 });
        }
      }
    }    // Check if email already exists (only for personal registrations)
    if (user_type !== 'company') {
      const { data: existingAccount } = await supabase
        .from('account')
        .select('account_id')
        .eq('account_email', email)
        .single();

      if (existingAccount) {
        return NextResponse.json({ error: 'An account with this email already exists' }, { status: 400 });
      }
    }    // Hash password (only for personal registrations)
    let hashedPassword = null;
    let verificationCode = null;
    if (user_type !== 'company') {
      hashedPassword = await bcrypt.hash(password, 12);
      // Generate 6-digit verification code
      verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    }

    // Generate unique account number (only for personal registrations)
    let accountNumber = null;
    if (user_type !== 'company') {
      accountNumber = 'ACC' + Date.now() + Math.floor(Math.random() * 1000);
    }    // Handle different registration types
    if (user_type === 'company') {
      await registerCompany({
        company_name,
        company_description,
        company_website,
        company_phone,
        company_email,
        // Address data
        premise_name,
        street_name,
        barangay_name,
        city_name
      });
    } else {
      // Personal registration (job-seeker or employee)      await registerPerson({
        username,
        email,
        hashedPassword,
        verificationCode,
        accountNumber,
        user_type,
        first_name,
        last_name,
        phone,
        birth_date,
        nationality_id,
        gender_id,
        // Address data
        premise_name,
        street_name,
        barangay_name,
        city_name,
        // Additional fields
        education_level,
        experience_level,
        preferred_job_type,
        preferred_location,
        preferred_salary_min,
        preferred_salary_max,        profile_summary,
        skills,
        job_title,
        company_id,
        company_name,
        company_industry,
        company_description,
        company_website,
        company_size,
        company_phone,        company_email
      });
    }

    // Send appropriate emails after successful registration
    if (user_type === 'company') {
      // Send welcome email for company registration
      if (company_email || company_name) {
        try {
          await sendCompanyWelcomeEmail(company_email || 'noreply@gojob.com', company_name);
          console.log('Company welcome email sent successfully');
        } catch (emailError) {
          console.error('Failed to send company welcome email:', emailError);
          // Don't fail the registration if email fails
        }
      }
    } else {
      // Send verification email for personal registrations
      try {
        const userName = `${first_name} ${last_name}`;
        await sendVerificationEmail(email, verificationCode, userName);
        console.log('Verification email sent successfully');
      } catch (emailError) {
        console.error('Failed to send verification email:', emailError);
        // Don't fail the registration if email fails
      }
    }

    return NextResponse.json({ 
      message: user_type === 'company' 
        ? 'Company registration successful! Your company has been added to our directory.' 
        : 'Registration successful! Please check your email for verification instructions.',
      verificationRequired: user_type !== 'company'
    });

  } catch (error) {
    console.error('Registration error:', error);
    
    // Handle specific database errors
    if (error.message && error.message.includes('duplicate key')) {
      return NextResponse.json({ error: 'An account with this information already exists' }, { status: 400 });
    }
    
    return NextResponse.json({ 
      error: error.message || 'Registration failed. Please try again.' 
    }, { status: 500 });
  }
}

async function registerCompany(data) {
  const {
    company_name,
    company_description,
    company_website,
    company_phone,
    company_email,
    // Address data
    premise_name,
    street_name,
    barangay_name,
    city_name
  } = data;

  // Create address for company
  const { data: addressData, error: addressError } = await supabase
    .from('address')
    .insert([{
      premise_name: premise_name || (company_name + ' HQ'),
      street_name: street_name || null,
      barangay_name: barangay_name || null,
      city_name: city_name
    }])
    .select('address_id')
    .single();

  if (addressError) {
    console.error('Address creation error:', addressError);
    throw new Error('Failed to create company address: ' + addressError.message);
  }

  // Create company record (no account required)
  const { error: companyError } = await supabase
    .from('company')
    .insert([{
      company_name,
      company_email: company_email || null,
      company_phone: company_phone || null,
      company_website: company_website || null,
      company_description: company_description || null,
      address_id: addressData.address_id
    }]);

  if (companyError) {
    console.error('Company creation error:', companyError);
    throw new Error('Failed to create company record: ' + companyError.message);
  }
}

async function registerPerson(data) {
  const {
    username,
    email,
    hashedPassword,
    verificationCode,
    accountNumber,
    user_type,
    first_name,
    last_name,
    phone,
    birth_date,
    nationality_id,
    gender_id,
    // Address data
    premise_name,
    street_name,
    barangay_name,
    city_name,
    // Additional fields
    profile_summary,
    job_title,
    company_id,
    company_name,
    company_industry,
    company_description,
    company_website,
    company_size,
    company_phone,
    company_email
  } = data;

  // Validate nationality exists
  const { data: nationalityCheck, error: nationalityError } = await supabase
    .from('nationality')
    .select('nationality_id')
    .eq('nationality_id', nationality_id)
    .single();

  if (nationalityError || !nationalityCheck) {
    throw new Error('Invalid nationality selected');
  }

  // Create address
  const { data: addressData, error: addressError } = await supabase
    .from('address')
    .insert([{
      premise_name: premise_name || null,
      street_name: street_name || null,
      barangay_name: barangay_name || null,
      city_name: city_name
    }])
    .select('address_id')
    .single();

  if (addressError) {
    console.error('Address creation error:', addressError);
    throw new Error('Failed to create address: ' + addressError.message);
  }
  // Create person record
  const { data: personData, error: personError } = await supabase
    .from('person')
    .insert([{
      first_name,
      last_name,
      middle_name: null,
      date_of_birth: birth_date,
      gender: parseInt(gender_id),
      address_id: addressData.address_id,
      nationality_id: parseInt(nationality_id)
    }])
    .select('person_id')
    .single();

  if (personError) {
    console.error('Person creation error:', personError);
    throw new Error('Failed to create person record: ' + personError.message);
  }
  // Create account
  const { data: accountData, error: accountError } = await supabase
    .from('account')
    .insert([{
      account_email: email,
      account_username: username || (email.split('@')[0] + '_' + Date.now()),
      account_phone: phone || null,
      account_number: accountNumber,
      account_password: hashedPassword,
      account_type_id: 2, // Both job-seekers and employees use account_type_id=2
      account_is_verified: false
    }])
    .select('account_id')
    .single();  if (accountError) {
    console.error('Account creation error:', accountError);
    throw new Error('Failed to create account: ' + accountError.message);
  }

  // Store verification code with 24-hour expiration
  try {
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24);
    
    const { error: codeError } = await supabase
      .from('verification_codes')
      .upsert([{
        account_id: accountData.account_id,
        code: verificationCode,
        expires_at: expiresAt.toISOString()
      }], {
        onConflict: 'account_id'
      });

    if (codeError) {
      console.error('Verification code storage error:', codeError);
      console.log('Note: verification_codes table may not exist. Please run the SQL script to create it.');
      // Don't fail registration if verification code storage fails
    }
  } catch (verificationError) {
    console.error('Failed to store verification code:', verificationError);
    // Continue with registration even if verification code storage fails
  }
  if (user_type === 'job-seeker') {
    // Create job seeker record
    const { error: jobSeekerError } = await supabase
      .from('job_seeker')
      .insert([{
        person_id: personData.person_id,
        account_id: accountData.account_id,
        job_seeker_description: profile_summary || null
      }]);

    if (jobSeekerError) {
      console.error('Job seeker creation error:', jobSeekerError);
      throw new Error('Failed to create job seeker profile: ' + jobSeekerError.message);
    }  } else if (user_type === 'employee') {
    // For employees, use provided company_id
    let finalCompanyId = company_id || null;

    // If company_id is provided, validate it exists
    if (company_id) {
      const { data: companyExists, error: companyCheckError } = await supabase
        .from('company')
        .select('company_id')
        .eq('company_id', company_id)
        .single();

      if (companyCheckError || !companyExists) {
        throw new Error('Invalid company ID provided');
      }
    }

    // Create employee record
    const { error: employeeError } = await supabase
      .from('employee')
      .insert([{
        person_id: personData.person_id,
        account_id: accountData.account_id,
        company_id: finalCompanyId,
        position_name: job_title || null
      }]);

    if (employeeError) {
      console.error('Employee creation error:', employeeError);
      throw new Error('Failed to create employee profile: ' + employeeError.message);
    }
  }
}
